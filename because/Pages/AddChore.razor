@page "/AddChore"

@layout AddLayout
@using Google.Cloud.Firestore

@inject NavigationManager NavigationManager
@inject ChoreService ChoreService
@inject MauiInterop Maui
<span class= "centered-text top-0 position-fixed" style="font-family: 'Comic Sans MS'; color: white;  font-size: 25px; left: 50%; margin-top: 20px; transform: translateX(-50%);">Add Chore</span>
<EditForm Model="chore" OnSubmit="AddChoreAsync">
	<div class="card-body text-center">
		<div class="vstack text-start">
			<div class="mb-3" style="margin-top: 6%">
				<InputText @bind-Value="chore.Name" placeholder="Enter Chore" class="form-control less-rounded fs-6"  />
			</div>

			<div class="mb-3" style="margin-top: 5%">
				<label class="form-label">Profile Picture</label>
				<InputFile OnChange="OnInputFileChange" />
			</div>
			<div class="mb-3" style="margin-top: 5%">
				<label for="assigneeDropdown" class="form-label">Select Assignee:</label>
				<InputSelect @bind-Value="childNameID" id="assigneeDropdown" class="form-control less-rounded fs-6">
					
					@foreach (var assignee in childrenNames)
					{
						<option value= "@assignee.Key" >@assignee.Value</option>
					}
				</InputSelect>
			</div>
			<div class="mb-3" style="margin-top: 5%">
				<label class="form-label">Chore Coin Amount</label>
				<InputNumber @bind-Value="chore.Coins" placeholder="Enter Amount" class="form-control less-rounded fs-6" />
			</div>
			<button type="submit" class="btn btn-primary rounded-pill" style="margin-top: 5%;border-color:#A288E3; background-color: #A288E3; color: beige;">Add Chore</button>
		</div>
	</div>
</EditForm>
<button @onclick="() => NavBack()" class="text-left position-fixed top-0 start-0" style="border: none; background: none; cursor: pointer; position: fixed; display: flex; flex-direction: column; align-items: center; justify-content: center;">
	<img src="/images/bee_back_arrow.png" alt="" style="width: 70px; height: 70px;">
</button>

@code {
	private ChoreModel chore = new();
	private Dictionary<int, string> childrenNames = new();
	private int childNameID;
	protected override async Task OnInitializedAsync()
	{
		await LoadData();

	}
	private async Task LoadData()
	{
		CollectionReference collection = AuthService.Database.Collection("Users");

		QuerySnapshot querySnapshot = await collection
			.WhereEqualTo("Email", AuthService._currentUser.Email)
			.WhereEqualTo("Role", "C")
			.GetSnapshotAsync();

		if (querySnapshot.Documents.Count > 0)
		{
			int id = 0;
			foreach (var document in querySnapshot.Documents)
			{
				if (document.TryGetValue("Name", out object ChildName))
				{
					childrenNames.Add(id, ChildName?.ToString());
					id++;
				}
			}
		}
	}

	private async Task AddChoreAsync()
	{
		Maui.ShowLoader();
		try
		{
			chore.AssigneeName = childrenNames[childNameID];
			var result = await ChoreService.AddChoreAsync(chore);
			if (result.IsSuccess)
			{
				NavigationManager.NavigateTo("/ParentPage", replace: true);
			}
			else
			{
				await Maui.ShowErrorAlertAsync(result.Error ?? "Error in signining up");
			}
		}
		catch (Exception ex)
		{
			await Maui.ShowErrorAlertAsync(ex.Message);

		}
		finally
		{
			Maui.HideLoader();
		}
	}

	private void OnInputFileChange(InputFileChangeEventArgs e)
	{
		var files = e.GetMultipleFiles();
		var selectedFile = files.FirstOrDefault();

		if (selectedFile != null)
		{
			chore.Image = selectedFile;
		}
	}
	private void NavBack()
	{
		NavigationManager.NavigateTo("/ParentPage", replace: true);
	}
}
